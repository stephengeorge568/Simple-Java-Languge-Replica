(*#line 31.10 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*)(* ============================================================================================== *) 
datatype lexresult    = SHELL of string * string * {line: word, column: word};
val error             = fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof             = fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
        fun split(x, []   ) =  raise General.Fail("an_error")
          | split(x, y::ys) = if x=y then ys else split(x,ys);
                                                    
        fun splitFirst(symbol,[])    =     [] (* symbol was not in the input list *)
          | splitFirst(symbol,x::xs) =     if x = symbol 
                        then (* found split point *)
                            []
                        else (* keep looking      *)
                            x::splitFirst(symbol,xs);
                                                                        
        val s0   = explode(yytext);
        val s1   = split(#"<",s0);
        val s2   = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
     
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 35.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\076\077\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\076\074\003\003\003\073\003\003\072\071\070\068\003\066\003\064\
\\063\061\061\061\061\061\061\061\061\061\003\060\054\052\050\003\
\\003\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\047\003\003\046\003\
\\003\043\039\007\007\035\029\007\007\025\007\007\007\007\007\023\
\\018\007\007\007\014\007\007\009\007\007\007\006\005\004\003\003\
\\003"
),
 (7, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\010\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\011\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\012\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\013\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\015\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\016\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\017\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\019\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\020\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\021\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\022\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\024\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\028\008\008\008\008\008\008\008\026\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\027\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\032\008\008\008\008\008\008\008\008\008\008\008\008\008\030\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\031\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\033\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\034\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\036\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\037\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\038\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\040\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\041\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\042\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\044\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\045\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\055\055\055\055\055\055\055\055\055\055\000\000\000\000\056\000\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\055\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\000\000\000\000\058\
\\000\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\062\062\062\062\062\062\062\062\062\062\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (65, 
"\065\065\065\065\065\065\065\065\065\065\000\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (76, 
"\000\000\000\000\000\000\000\000\000\077\077\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 127)], trans = 0},
{fin = [(N 28),(N 127)], trans = 0},
{fin = [(N 89),(N 127)], trans = 0},
{fin = [(N 26),(N 127)], trans = 0},
{fin = [(N 103),(N 127)], trans = 7},
{fin = [(N 103)], trans = 7},
{fin = [(N 103),(N 127)], trans = 9},
{fin = [(N 103)], trans = 10},
{fin = [(N 103)], trans = 11},
{fin = [(N 103)], trans = 12},
{fin = [(N 38),(N 103)], trans = 7},
{fin = [(N 103),(N 127)], trans = 14},
{fin = [(N 103)], trans = 15},
{fin = [(N 103)], trans = 16},
{fin = [(N 103),(N 113)], trans = 7},
{fin = [(N 103),(N 127)], trans = 18},
{fin = [(N 103)], trans = 19},
{fin = [(N 103)], trans = 20},
{fin = [(N 103)], trans = 21},
{fin = [(N 44),(N 103)], trans = 7},
{fin = [(N 103),(N 127)], trans = 23},
{fin = [(N 53),(N 103)], trans = 7},
{fin = [(N 103),(N 127)], trans = 25},
{fin = [(N 103)], trans = 26},
{fin = [(N 10),(N 103)], trans = 7},
{fin = [(N 15),(N 103)], trans = 7},
{fin = [(N 103),(N 127)], trans = 29},
{fin = [(N 103)], trans = 30},
{fin = [(N 32),(N 103)], trans = 7},
{fin = [(N 103)], trans = 32},
{fin = [(N 103)], trans = 33},
{fin = [(N 103)], trans = 16},
{fin = [(N 103),(N 127)], trans = 35},
{fin = [(N 103)], trans = 36},
{fin = [(N 103)], trans = 37},
{fin = [(N 20),(N 103)], trans = 7},
{fin = [(N 103),(N 127)], trans = 39},
{fin = [(N 103)], trans = 40},
{fin = [(N 103)], trans = 41},
{fin = [(N 6),(N 103)], trans = 7},
{fin = [(N 103),(N 127)], trans = 43},
{fin = [(N 103)], trans = 44},
{fin = [(N 57),(N 103)], trans = 7},
{fin = [(N 85),(N 127)], trans = 0},
{fin = [(N 127)], trans = 47},
{fin = [], trans = 48},
{fin = [(N 125)], trans = 0},
{fin = [(N 67),(N 127)], trans = 50},
{fin = [(N 73)], trans = 0},
{fin = [(N 12),(N 127)], trans = 52},
{fin = [(N 60)], trans = 0},
{fin = [(N 65),(N 127)], trans = 54},
{fin = [], trans = 55},
{fin = [], trans = 56},
{fin = [], trans = 57},
{fin = [(N 121)], trans = 57},
{fin = [(N 70)], trans = 0},
{fin = [(N 1),(N 127)], trans = 0},
{fin = [(N 100),(N 127)], trans = 61},
{fin = [(N 100)], trans = 61},
{fin = [(N 100),(N 127)], trans = 0},
{fin = [(N 81),(N 127)], trans = 64},
{fin = [(N 96)], trans = 65},
{fin = [(N 77),(N 127)], trans = 66},
{fin = [(N 50)], trans = 0},
{fin = [(N 75),(N 127)], trans = 68},
{fin = [(N 47)], trans = 0},
{fin = [(N 79),(N 127)], trans = 0},
{fin = [(N 24),(N 127)], trans = 0},
{fin = [(N 22),(N 127)], trans = 0},
{fin = [(N 83),(N 127)], trans = 0},
{fin = [(N 87),(N 127)], trans = 74},
{fin = [(N 63)], trans = 0},
{fin = [(N 92),(N 127)], trans = 76},
{fin = [(N 92)], trans = 76}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => let val yytext=yymktext() in (*#line 48.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 658.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 10 => let val yytext=yymktext() in (*#line 50.33 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 660.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 100 => let val yytext=yymktext() in (*#line 83.37 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("integer"   , yytext,     getNextTokenPos(yytext))    (*#line 662.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 103 => let val yytext=yymktext() in (*#line 84.37 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("variable_id"        , yytext,     getNextTokenPos(yytext))    (*#line 664.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 113 => let val yytext=yymktext() in (*#line 85.37 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("boolean"        , yytext,     getNextTokenPos(yytext))    (*#line 666.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 12 => let val yytext=yymktext() in (*#line 51.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 668.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 121 => let val yytext=yymktext() in (*#line 88.35 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(generateSchemaTokenName(yytext), yytext, getNextTokenPos(yytext))    (*#line 670.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 125 => let val yytext=yymktext() in (*#line 89.35 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("" , yytext, getNextTokenPos(yytext))    (*#line 672.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 127 => let val yytext=yymktext() in (*#line 91.35 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) error("ignored an unprintable character: " ^ yytext); getNextTokenPos(yytext); lex()  (*#line 674.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 15 => let val yytext=yymktext() in (*#line 52.32 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 676.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 20 => let val yytext=yymktext() in (*#line 53.34 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 678.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 22 => let val yytext=yymktext() in (*#line 54.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 680.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 24 => let val yytext=yymktext() in (*#line 55.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 682.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 26 => let val yytext=yymktext() in (*#line 56.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 684.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 28 => let val yytext=yymktext() in (*#line 57.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 686.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 32 => let val yytext=yymktext() in (*#line 58.33 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 688.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 38 => let val yytext=yymktext() in (*#line 59.35 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,  yytext,    getNextTokenPos(yytext))    (*#line 690.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 44 => let val yytext=yymktext() in (*#line 60.35 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 692.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 47 => let val yytext=yymktext() in (*#line 61.32 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,  yytext,    getNextTokenPos(yytext))    (*#line 694.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 50 => let val yytext=yymktext() in (*#line 62.32 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,     getNextTokenPos(yytext))    (*#line 696.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 53 => let val yytext=yymktext() in (*#line 63.32 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 698.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 57 => let val yytext=yymktext() in (*#line 64.33 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,     getNextTokenPos(yytext))    (*#line 700.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 6 => let val yytext=yymktext() in (*#line 49.34 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext, yytext,    getNextTokenPos(yytext))    (*#line 702.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 60 => let val yytext=yymktext() in (*#line 65.32 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,    yytext,  getNextTokenPos(yytext))    (*#line 704.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 63 => let val yytext=yymktext() in (*#line 66.32 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,  yytext,    getNextTokenPos(yytext))    (*#line 706.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 65 => let val yytext=yymktext() in (*#line 67.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 708.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 68.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,  yytext,    getNextTokenPos(yytext))    (*#line 710.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 70 => let val yytext=yymktext() in (*#line 69.32 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 712.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 73 => let val yytext=yymktext() in (*#line 70.32 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,  yytext,    getNextTokenPos(yytext))    (*#line 714.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 75 => let val yytext=yymktext() in (*#line 71.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 716.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 77 => let val yytext=yymktext() in (*#line 72.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,  yytext,    getNextTokenPos(yytext))    (*#line 718.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 79 => let val yytext=yymktext() in (*#line 73.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 720.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 81 => let val yytext=yymktext() in (*#line 74.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 722.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 83 => let val yytext=yymktext() in (*#line 75.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 724.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 85 => let val yytext=yymktext() in (*#line 76.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 726.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 87 => let val yytext=yymktext() in (*#line 77.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 728.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 89 => let val yytext=yymktext() in (*#line 78.31 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext,   yytext,   getNextTokenPos(yytext))    (*#line 730.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 92 => let val yytext=yymktext() in (*#line 80.18 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 732.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 96 => let val yytext=yymktext() in (*#line 81.18 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 734.1 "C:\Users\Stephen\Desktop\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
